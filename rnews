#!/usr/bin/env python2
# -*- coding: utf-8 -*-
#
# UUCP Batch Processor for rnews
#
# This script processes UUCP batch files, extracts news posts,
# and stores them into an IMAP server under folders based on the
# "Newsgroups" header.
#
# Supports both compressed (gzip) and uncompressed batch formats.
#
# License: GPLv3
#
# Copyright (C) 2025 Andreas Thienemann <andreas@bawue.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#

import argparse
import os
import gzip
import email
import imaplib
import ConfigParser
import StringIO
import logging
import sys
import syslog

# Config file path
CONFIG_FILE = os.path.expanduser("/etc/uucp/rnews.cfg")

def setup_logging(debug=False):
    """Set up logging with optional debug mode."""
    log_level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(
        format="%(asctime)s [%(levelname)s] %(message)s",
        level=log_level
    )

def read_config():
    """Read IMAP credentials from the config file."""
    config = ConfigParser.ConfigParser()
    if not os.path.exists(CONFIG_FILE):
        logging.error("Config file %s not found.", CONFIG_FILE)
        raise IOError("Config file {0} not found.".format(CONFIG_FILE))
        sys.exit(1)
    config.read(CONFIG_FILE)
    return config.get("IMAP", "host"), config.get("IMAP", "username"), config.get("IMAP", "password")

def open_batch_file():
    """Read batch file from stdin, detect compression, and return a file object."""
    if sys.stdin.isatty():
        logging.error("No input provided on stdin.")
        sys.exit(1)

    first_line = sys.stdin.readline().strip()
    remaining_data = sys.stdin.read()  # Read the rest of stdin

    if first_line == "#! gunbatch":
        logging.info("Detected gzip-compressed batch file")
        return gzip.GzipFile(fileobj=StringIO.StringIO(remaining_data), mode="rb")

    logging.debug("Processing uncompressed batch file")
    return StringIO.StringIO(first_line + "\n" + remaining_data)


def extract_messages(file_obj):
    """Read messages one by one from the batch file."""
    messages = []

    while True:
        line = file_obj.readline()
        if not line:
            break  # End of file

        line = line.strip()
        if line.startswith("#! rnews "):
            try:
                length = int(line.split()[2])
                logging.debug("Reading message of %d bytes", length)
                message = file_obj.read(length).strip()
                messages.append(message)
            except (IndexError, ValueError) as e:
                logging.error("Invalid batch format: %s", str(e))
		sys.exit(1)

    logging.info("Extracted %d messages", len(messages))
    return messages

def get_newsgroup_folder(message):
    """Extract the Newsgroups header to determine the IMAP folder."""
    msg_obj = email.message_from_string(message)
    newsgroups = msg_obj.get("Newsgroups", "unknown").strip().replace(",", "_")
    print(newsgroups)
    folder = u"Usenet/{0}".format(newsgroups)

    logging.debug("Message will be stored in folder: %s", folder)
    return folder

def create_folder_if_needed(imap, folder, folder_delimiter="/"):
    """Check if an IMAP folder exists, and create it if missing."""
    folder_utf7 = folder_delimiter.join([part.encode("utf-7") for part in folder.split(folder_delimiter)])
    resp, folders = imap.list()

    if resp == "OK":
        existing_folders = [line.split(' "' + folder_delimiter + '" ')[-1] for line in folders]
        if folder not in existing_folders:
            logging.warning("Folder %s does not exist, creating it...", folder)
            imap.create(folder_utf7)
            imap.subscribe(folder_utf7)

def store_message(imap, folder, message):
    """Store the message in the appropriate IMAP folder, creating it if needed."""
    create_folder_if_needed(imap, folder)

    logging.info("Storing message in folder: %s", folder)
    msg_obj = email.message_from_string(message)
    date_header = msg_obj.get("Date", None)
    message_id = msg_obj.get("Message-ID", "unknown")

    if date_header:
        parsed_date = email.utils.parsedate_tz(date_header)
        if parsed_date:
            timestamp = email.utils.mktime_tz(parsed_date)
            imap_date = time.strftime("%d-%b-%Y %H:%M:%S +0000", time.gmtime(timestamp))
        else:
            logging.warning("Invalid Date header, using current time")
            imap_date = time.strftime("%d-%b-%Y %H:%M:%S +0000", time.gmtime())
    else:
        logging.warning("No Date header found, using current time")
        imap_date = time.strftime("%d-%b-%Y %H:%M:%S +0000", time.gmtime())

    imap.append(folder, None, imap_date, message)

    # Log message storage in syslog
    syslog.openlog(ident="rnews", logoption=syslog.LOG_PID, facility=syslog.LOG_MAIL)
    syslog.syslog(syslog.LOG_INFO, "Stored message {0} in folder {1}".format(message_id, folder))
    syslog.closelog()

def process_batch_file():
    """Process a UUCP batch file from stdin and store messages in IMAP."""
    try:
        logging.info("Processing batch from stdin")
        host, username, password = read_config()

        logging.debug("Connecting to IMAP server: %s", host)
        imap = imaplib.IMAP4_SSL(host)
        imap.login(username, password)

        file_obj = open_batch_file()
        messages = extract_messages(file_obj)
        file_obj.close()

        for message in messages:
            folder = get_newsgroup_folder(message)
            store_message(imap, folder, message)

        imap.logout()
        logging.info("Processing completed successfully.")
    except Exception as e:
        logging.error("Error processing batch file: %s", str(e))
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Dummy rnews tool for UUCP batch processing")
    parser.add_argument("--debug", action="store_true", help="Enable debug output")
    args = parser.parse_args()

    setup_logging(args.debug)
    process_batch_file()
